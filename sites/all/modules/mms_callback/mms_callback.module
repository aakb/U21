<?php

//define('MMS_CALLBACK_TIME', 4200);
//define('MMS_CALLBACK_FILE_PATH', '/uploaded_mms');
//define('MMS_CALLBACK_SMS_RECEIPT_URL', 'http://www.smssys.dk/?user=U21+Denmark&pass=2866');
//define('MMS_CALLBACK_SMS_RECEIPT_MSG', 'Tak for billedet. Vi har givet vores redaktører besked. Du kan også få U21-nyheder på SMS ved at sende \'u21 updates\' til 1220.');

/**
 * Implementation of hook_perm().
 */
function mms_callback_perm() {
  return array(
      'configure mms',
      'configure mms messages',
    );
 }

/**
 * Implementation of hook_menu().
 */
function mms_callback_menu() {
  $items = array();

  $items['callback/upload/mms'] = array(
    'title' => 'MMS callback',
    'page callback' => 'mms_callback_message',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  $items['callback/upload/mms/xml'] = array(
    'title' => 'XML mms feed',
    'page callback' => 'mms_callback_xml',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/settings/mms'] = array(
    'title' => 'MMS settings',
    'description' => t('Configureations for MMS\'s'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mms_calback_admin_form'),
    'access arguments' => array('configure mms'),
    'file' => 'mms_callback.admin.inc',
  );

  $items['admin/settings/mms/settings'] = array(
    'title' => 'Settings',
    'description' => t('Configure MMS settings.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/settings/mms/messages'] = array(
    'title' => 'MMS messages',
    'description' => t('Set the messages to send back to users.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mms_calback_message_form'),
    'access arguments' => array('configure mms messages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'file' => 'mms_callback.admin.inc',
  );

  return $items;
}

/**
 * Menu callback to parse MMS XML message when MMS is being received.
 *
 */
function mms_callback_message() {
  // Try to get the XML callback information
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $postText = file_get_contents('php://input');

    // TMP SAVE
//    $datetime = date('ymdHis');
//    $xmlfile = file_directory_path()."/myfile" . $datetime . ".xml";
//    $FileHandle = fopen($xmlfile, 'w') or die("can't open file");
//    fwrite($FileHandle, $postText);
//    fclose($FileHandle);
  }
  else {
    // No information found
    watchdog('MMS Callback', t('Callback received but no data found in message.'), NULL, WATCHDOG_ERROR);
    return;
  }

  // Load settings
  $settings = variable_get('mms_callback', array());
  if (empty($settings)) {
    watchdog('MMS Callback', t('MMS received but no setting where found.'));
    return;
  }

  // Parse XML message
  $xml = new SimpleXMLElement($postText);
  if (!$xml) {
    watchdog('MMS Callback', t('The XML could not be parsed.'), NULL, WATCHDOG_ERROR);
    return;
  }
  
  // Get text and strip keyword
  $text = trim(substr(file_get_contents(trim($xml->message->content->text)), strlen($xml->keyword)));
  
  // Download image(s)
  $images =  array();  
  if (count($xml->message->content->image) > 1) {
    // More than one picture is added to the MMS    
    foreach ($xml->message->content->image as $url) {
      $url = trim($url);
      $image = mms_callback_download_image($url, $settings['path'], $xml->mobile);
      if (!$image) {
        return;
      }
      $images[] = $image;
    }
  }
  else {
    $url = trim($xml->message->content->image);
    $image = mms_callback_download_image($url, $settings['path'], $xml->mobile);
    if (!$image) {
      return;
    }
    $images[] = (string)$image;
  }

  // Write information to the database.
  $record = new stdClass();
  $record->msgid = trim($xml->msgid);
  $record->message = $text;
  $record->images = serialize($images);
  $record->timestamp = time();
  drupal_write_record('mms_callback', $record);
  
  // Send SMS repeipt back
  $msg = urlencode(utf8_decode(mms_callback_find_message(mms_callback_secound_keyword($text))));
  $url = $settings['gateway'] . '&number=' . substr(trim($xml->mobile), 2) . '&message=' .  $msg;
  $ret = file_get_contents($url);
  $xml = new SimpleXMLElement($ret);
  if (!$xml) {
    watchdog('MMS Callback', t('The receipt MSM returned XML could not be parsed.'), NULL, WATCHDOG_ERROR);
    return;
  }

  // Check that the SMS was sendt, if not log error code to log
  $code = trim($xml->status->statusline->code);
  if ($code != 0) {
    watchdog('MMS Callback', t('SMS receipt not send gateway returned error code %code', array('%code' => $code)), NULL, WATCHDOG_ERROR);
  }
}

function mms_callback_secound_keyword($text) {
  return strtolower(preg_replace('/\W.*/', '', $text));
}

/**
 * Find the right message to send back.
 *
 * @param <type> $keyword
 * @return <type>
 */
function mms_callback_find_message($keyword) {
  // Load messages
  $messages = variable_get('mms_callback_messages', array());
  if (empty($messages)) {
    watchdog('MMS Callback', t('MMS received but no setting where found.'));
    return 'No message configured!';
  }

  if (array_key_exists($keyword, $messages)) {
    return $messages[$keyword];
  }
  else {
    return $messages['default_msg'];
  }
}

/**
 * Downloadeds a image from an url and prefixes the name of the downloaded url
 *
 * @param string $url
 * @param string $prefix
 * @return mixed image path if image was downloaded else FALSE
 */
function mms_callback_download_image($url, $path, $prefix = NULL) {
  $path = file_directory_path() . '/' . $path;
  if (file_check_directory($path, FILE_CREATE_DIRECTORY)) {
    $image = ($prefix ? $prefix : time()) . '_' . basename($url);
    file_put_contents(realpath($path) . '/' . $image, file_get_contents($url));
  } else {
    watchdog('MMS Callback', t('Could not create folder inside files folder.'), NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  return $path . '/' . (string)$image;
}

/**
 * Menu callback to generate feed based on data received by MMS's.
 */
function mms_callback_xml() {
  // Load settings
  $settings = variable_get('mms_callback', array());
  if (empty($settings)) {
    watchdog('MMS Callback', t('MMS received but no setting where found.'));
    return;
  }

  // Start new xml document
  $xml = new DOMDocument('1.0', 'utf-8');
  $xml->formatOutput= true;

  // Create root element
  $messages = $xml->createElement('messages');
  $xml->appendChild($messages);

  // Load data from the database
  $result = db_query('SELECT * FROM {mms_callback} WHERE timestamp > '. (time() - $settings['time']));
  while ($row = db_fetch_array($result)) {
    $msg = $xml->createElement('message');

    // Add mid attribute
    $mid = $xml->createAttribute('mid');
    $msg->appendChild($mid);
    $midValue = $xml->createTextNode($row['mid']);
    $mid->appendChild($midValue);

    // Add time attribute
    $timestamp = $xml->createAttribute('timestamp');
    $msg->appendChild($timestamp);
    $timestampValue = $xml->createTextNode($row['timestamp']);
    $timestamp->appendChild($timestampValue);

    // Add msgid attribute
    $msgid = $xml->createAttribute('msgid');
    $msg->appendChild($msgid);
    $msgidValue = $xml->createTextNode($row['msgid']);
    $msgid->appendChild($msgidValue);

    // Add text
    $text = $xml->createElement('text');
    $msg->appendChild($text);
    $textValue = $xml->createTextNode($row['message']);
    $text->appendChild($textValue);

    // Get first word of the text as it may be a keyword too and can be used to
    // index the MMS's.
    $taxonomy = $xml->createElement('taxonomy');
    $msg->appendChild($taxonomy);
    $taxonomyValue = $xml->createTextNode(mms_callback_secound_keyword($row['message']));
    $taxonomy->appendChild($taxonomyValue);

    // Add image(s)
    $images = unserialize($row['images']);
    foreach ($images as $image) {
      $img = $xml->createElement('image');
      $msg->appendChild($img);
      $imgValue = $xml->createTextNode($image);
      $img->appendChild($imgValue);
    }

    $messages->appendChild($msg);
  }

  // Output XML
  echo $xml->saveXML();
}

/**
 * Defines a new feeds parser to parse the MMS feed generated by the module. So
 * nodes can be created based on the MMS's received.
 *
 * @return array $info
 */
function mms_callback_feeds_plugins() {
  $info = array();
  $info['mmsParser'] = array(
    'name' => "MMS Parser",
    'description' => t('Parses data from MMS feed'),
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'mmsParser',
      'file' => 'mmsParser.inc',
      'path' => drupal_get_path('module', 'mms_callback'),
    ),
  );
  return $info;
}

/**
 * Make sure that the feed parser cache is cleared on module activation.
 */
function mms_callback_enable() {
  cache_clear_all('plugins:feeds:plugins', 'cache');
}
