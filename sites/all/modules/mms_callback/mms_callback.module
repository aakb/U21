<?php

define('MMS_CALLBACK_TIME', 4200);
define('MMS_CALLBACK_KEYWORD_LENGHT', 8);

/**
 * Implementation of hook_menu().
 */
function mms_callback_menu() {
  $items = array();

  $items['callback/upload/mms'] = array(
    'title' => 'MMS callback',
    'page callback' => 'mms_callback_message',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  $items['callback/upload/mms/xml'] = array(
    'title' => 'XML mms feed',
    'page callback' => 'mms_callback_xml',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback to parse MMS XML message when MMS is being received.
 *
 */
function mms_callback_message() {
  // Try to get the XML callback information
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $postText = file_get_contents('php://input');

    // TMP SAVE
    $datetime = date('ymdHis');
    $xmlfile = file_directory_path()."/myfile" . $datetime . ".xml";
    $FileHandle = fopen($xmlfile, 'w') or die("can't open file");
    fwrite($FileHandle, $postText);
    fclose($FileHandle);
  }
  else {
    // No information found
    watchdog('MMS Callback', t('Callback received but no data found in message.'), NULL, WATCHDOG_ERROR);
    return;
  }

  // Parse XML message
  $xml = new SimpleXMLElement($postText);
  if (!$xml) {
    watchdog('MMS Callback', t('The XML could not be parsed.'), NULL, WATCHDOG_ERROR);
    return;
  }
  
  // Get text and strip keyword
  $text = substr(file_get_contents(trim($xml->message->content->text)), MMS_CALLBACK_KEYWORD_LENGHT);
  
  // Create folder and download image
  $url = trim($xml->message->content->image);
  $path = file_directory_path() . '/mms_images';
  if (file_check_directory($path, FILE_CREATE_DIRECTORY)) {
    $image = $xml->mobile . '_' . basename($url);
    file_put_contents(realpath($path) . '/' . $image, file_get_contents($url));
  }
  else {
    watchdog('MMS Callback', t('Could not create folder inside files folder.'), NULL, WATCHDOG_ERROR);
    return;
  }

  // Save information to the database
  $record = new stdClass();
  $record->msgid = trim($xml->msgid);
  $record->message = $text;
  $record->image = $path . '/' . $image;
  $record->timestamp = time();
  drupal_write_record('mms_callback', $record);
}

/**
 * Menu callback to generate feed based on data received by MMS's.
 */
function mms_callback_xml() {
  // Start new xml document
  $xml = new DOMDocument('1.0', 'utf-8');
  $xml->formatOutput= true;

  // Create root element
  $messages = $xml->createElement('messages');
  $xml->appendChild($messages);

  // Load data from the database
  $result = db_query('SELECT * FROM {mms_callback} WHERE timestamp > '. (time() - MMS_CALLBACK_TIME));
  while ($row = db_fetch_array($result)) {
    $msg = $xml->createElement('message');

    // Add mid attribute
    $mid = $xml->createAttribute('mid');
    $msg->appendChild($mid);
    $midValue = $xml->createTextNode($row['mid']);
    $mid->appendChild($midValue);

    // Add time attribute
    $timestamp = $xml->createAttribute('timestamp');
    $msg->appendChild($timestamp);
    $timestampValue = $xml->createTextNode($row['timestamp']);
    $timestamp->appendChild($timestampValue);

    // Add msgid attribute
    $msgid = $xml->createAttribute('msgid');
    $msg->appendChild($msgid);
    $msgidValue = $xml->createTextNode($row['msgid']);
    $msgid->appendChild($msgidValue);

    // Add image text
    $text = $xml->createElement('text');
    $msg->appendChild($text);
    $textValue = $xml->createTextNode($row['message']);
    $text->appendChild($textValue);

    // Add image tag
    $img = $xml->createElement('image');
    $msg->appendChild($img);
    $imgValue = $xml->createTextNode($row['image']);
    $img->appendChild($imgValue);

    $messages->appendChild($msg);
  }

  // Output XML
  echo $xml->saveXML();
}