<?php
// $Id$

/**
 * @file
 * Handles the generation and loading of nodes from "slugs", 
 * small bits of text, suitable for use in URLs.
 */

define('U21_REGION_SLUG_PREFIX', 'location/');

/**
 * Implementation of hook_menu().
 */
function u21_region_slug_menu() {
  $items = array();

  $items['admin/content/slugs'] = array(
    'title' => 'Region slug settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('u21_region_slug_admin_settings_form'),
    'access arguments' => array('configure slugs'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'u21_region_slug.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function u21_region_slug_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'region') {
    switch ($op) {
      case 'load':
        $node->u21_region_slug = db_result(db_query("SELECT slug FROM {u21_region_slug} WHERE nid=%d", $node->nid));
        break;
    }
  }
}

/**
 * Implementation of hook_ctools_arguments().
 */
function u21_region_slug_ctools_arguments() {
  $args = array();
  $args['u21_region_slug'] = array(
    'title' => t('U21 region slug'),
    'keyword' => 'node',
    'description' => t('Finds the node context based on the "slug" name for it.'),
    'context' => 'u21_region_slug_region_context',
  );
  return $args;
}

/**
 * Implementation of hook_token_list().
 */
function u21_region_slug_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'node' || $type == 'all') {
    $tokens['node']['u21_region_slug'] = t('Slug for the region');
    $tokens['node']['u21_region_slug_prefix'] = t('Slug for the region, with prefixed path');
  }
  
  return $tokens;
}

/**
 * Implementation of hook_token_values().
 */
function u21_region_slug_token_values($type, $object = NULL, $options = array()) {
  $tokens = array();
  if ($type == 'node') {
    $node = $object;

    // If node has a slug, use that.
    if (isset($node->u21_region_slug)) {
      if ($node->type == 'region') {
        $tokens['u21_region_slug'] = check_plain($node->u21_region_slug);
        $tokens['u21_region_slug_prefix'] = U21_REGION_SLUG_PREFIX;
      }
    }
    // If there is no slug set on the object, try looking it up
    // in the database, otherwise return the node id.
    else {
      $slug = db_result(db_query("SELECT slug FROM {u21_region_slug} WHERE nid = %d;", $node->nid));
      if (empty($slug)) {
        $slug = $node->nid;
      }
      if ($node->type == 'region') {
        $tokens['u21_region_slug'] = $slug;
        $tokens['u21_region_slug_prefix'] = U21_REGION_SLUG_PREFIX;
      }
    }

    // If we didn't set the region slug above, try looking it up from
    // the related region node.
    if (!isset($tokens['u21_region_slug'])) {
      // Look up the slug of the related region.
      if (isset($node->field_region_ref[0]['nid']) && !empty($node->field_region_ref[0]['nid'])) {
        $slug = db_result(db_query("SELECT slug FROM {u21_region_slug} WHERE nid = %d LIMIT 1;", $node->field_region_ref[0]['nid']));
        if ($slug) {
          $tokens['u21_region_slug'] = check_plain($slug);
          $tokens['u21_region_slug_prefix'] = U21_REGION_SLUG_PREFIX;
        }
        // If the related region doesn't have a slug, return its nid.
        else {
          $tokens['u21_region_slug'] = $node->field_region_ref[0]['nid'];
          $tokens['u21_region_slug_prefix'] = U21_REGION_SLUG_PREFIX;
        }
      }
    }

    // Finally, if we failed to set our tokens above, make sure to
    // return empty strings, since otherwise the token itself will be
    // printed in the output.
    if (empty($tokens['u21_region_slug'])) {
      $tokens['u21_region_slug'] = '';
    }
    if (empty($tokens['u21_region_slug_prefix'])) {
      $tokens['u21_region_slug_prefix'] = '';
    }
  }
  
  return $tokens;
}

/**
 * Lookup an argument to see if it corresponds to a region.
 */
function u21_region_slug_region_context($arg = NULL, $conf = NULL, $empty = FALSE) {
  // If unset it wants a generic, unfilled context.
  if ($empty) {
    return ctools_context_create_empty('node');
  }

  // We can accept either a node object or a pure nid.
  if (is_object($arg)) {
    return ctools_context_create('node', $arg);
  }

  // Cast argument to an integer to see if it looks like a node ID.
  $num = intval($arg);
  if (is_numeric($num) && $num > 0) {
    $nid = $num;
  }
  // Try looking up the argument as a slug
  elseif (strlen($arg) > 1) {
    $nid = db_result(db_query("SELECT nid FROM {u21_region_slug} WHERE slug='%s'", $arg));
  }
  else {
    return FALSE;
  }

  if (!$nid || !is_numeric($nid)) {
    return FALSE;
  }

  $node = node_load($nid);
  if (!$node) {
    return FALSE;
  }

  return ctools_context_create('node', $node);
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function u21_region_slug_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Slugify a piece of text, ie. make it ready for use in URLs.
 *
 * @param string $input
 *      Text to slugify.
 */
function u21_region_slug_slugify($input) {
  if (module_exists('transliteration')) {
    // Transliterate all letters down to ASCII
    $output = transliteration_get($input, '-', 'da');
  }
  else {
    $output = $input;
  }

  // Remove all characters that are not lowercase alphanumeric.
  $output = preg_replace('/[^a-z0-9]+/', '-', drupal_strtolower($output));
  // Remove dashes at the end of the string
  $output = preg_replace('/-+$/', '', $output);
  return $output;
}

/**
 * Get a region slug by the corresponding node ID
 *
 * @param integer $nid
 *    The node ID.
 * @return string
 *    The slug matching the node.
 */
function u21_region_slug_get_by_nid($nid) {
  $slug = db_result(db_query("SELECT slug FROM {u21_region_slug} WHERE nid=%d;", $nid));
  return $slug;
}

/**
 * Get all region slugs and corresponding node IDs
 *
 * @return array
 *    Regions title and slug indexed by node IDs.
 */
function u21_region_slug_get_all_slugs() {
  // Grab all the region nodes
  $query = db_query("SELECT node.nid, node.title, slugs.slug
                       FROM {node} AS node
                  LEFT JOIN {u21_region_slug} AS slugs ON (slugs.nid = node.nid)
                      WHERE node.type = 'region'
                   ORDER BY node.title");

  $regions = array();
  while ($row = db_fetch_object($query)) {
    $regions[$row->nid] = array('title' => $row->title, 'slug' => $row->slug);
  }

  return $regions;
}