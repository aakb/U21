<?php

/**
 * Implementation of hook_perm().
 */
function u21_content_perm() {
  return array(
    'create region',
    'edit region',
    'delete region',
  );
}

/**
 * Implementation of hook_access().
 */
function u21_content_access($op, $node, $account = NULL) {
  if ($node instanceOf stdClass) {
    $type = $node->type;
  }
  else {
    $type = $node;
  }

  $permissions = array(
    'region' => array(
      'create' => 'create region',
      'update' => 'edit region',
      'delete' => 'delete region',
    ),
  );

  if (isset($permissions[$type][$op])) {
    return user_access($permissions[$type][$op], $account);
  }
}

function u21_content_node_info() {
  return array(
    'region' => array(
      'name' => t('Region'),
      'module' => 'u21_content',
      'description' => 'Defines a region e.g Aarhus',
      'title_label' => t('Region name'),
      'body_label' => FALSE,
    ),
  );
}

/**
 * Remove the promote and sticky options form all forms
 */
function u21_content_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    global $user;
    if ($user->uid != 1) {
      unset($form[options][promote]);
      unset($form[options][sticky]);
    }
  }
}


 

/**
 * Implementation of hook_views_api() {
 */
function u21_content_views_api() {
  return array(
    'api' => 2.0,
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function u21_content_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function u21_content_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_theme().
 */
function u21_content_theme($existing, $type, $theme, $path) {
  return array(
    'u21_content_region_menu' => array(
      'arguments' => array('node' => NULL),
      'template' => 'u21_content_panels_content_region_menu',
      'preprocess functions' => array('u21_content_preprocess_region_menu'),
    ),
    'u21_content_region_calendar_link' => array(
      'arguments' => array('node' => NULL),
      'template' => 'u21_content_panels_content_region_calendar_link',
      'preprocess functions' => array('u21_content_preprocess_region_calendar_link'),
    ),
    'u21_content_taxonomy_links' => array(
      'arguments' => array('node' => NULL, 'path_prefix' => NULL, 
                           'vocabulary' => NULL, 'main_type' => NULL,
                           'node_types' => NULL, 'slug_nid' => NULL,
                           'panel_args' => NULL),
      'template' => 'u21_content_panels_content_taxonomy_links',
      'preprocess functions' => array('u21_content_preprocess_taxonomy_links'),
    ),
    'u21_content_slug_links' => array(
      'arguments' => array('node' => NULL, 'node_type' => NULL, 'slug_path' => NULL, 'global_path' => NULL),
      'template' => 'u21_content_panels_content_slug_links',
      'preprocess functions' => array('u21_content_preprocess_slug_links'),
    ),
    'u21_content_type_links' => array(
      'arguments' => array('args' => NULL, 'node_types' => NULL),
      'template' => 'u21_content_panels_content_type_links',
      'preprocess functions' => array('u21_content_preprocess_type_links'),
    ),
    'u21_content_panels_content_static_file_links' => array(
      'arguments' => array('node' => NULL),
      'template' => 'u21_content_panels_content_static_file_links',
      'preprocess functions' => array('u21_content_preprocess_static_file_links'),
    ),
    'u21_content_panels_content_page_links' => array(
      'arguments' => array('node' => NULL),
      'template' => 'u21_content_panels_content_page_links',
      'preprocess functions' => array('u21_content_preprocess_page_links'),
    ),
    'u21_content_panels_content_sidebar' => array(
      'arguments' => array('node' => NULL),
      'template' => 'u21_content_panels_content_sidebar',
      'preprocess functions' => array('u21_content_preprocess_sidebar'),
    ),
    'u21_content_event_details' => array(
      'arguments' => array('node' => NULL),
      'template' => 'u21_content_panels_content_event_details',
      'preprocess functions' => array('u21_content_preprocess_event_details'),
    ),
  );
}

/**
 * Preprocess hook for the region title and menu pane.
 */
function u21_content_preprocess_region_menu(&$variables) {
  $node = $variables['node'];

  // Set title
  $variables['title'] = t('U21 in @title', array('@title' => $node->title));

  // Load menu
  $conf = array('menu_name' => $node->field_menu_ref[0]['value'],
                'parent_mlid' => 0, 'title_link' => 0,
                'admin_title' => 'Static regional menu (1+)',
                'level' => 1, 'follow' => 0, 'depth' => 1,
                'expanded' => 0, 'sort' => 0,
                'override_title' => 1, 'override_title_text' => '',
                'delta' => 'ctools-_active-1' );
  $tree = menu_tree_build($conf);
  $variables['menu'] = $tree['content'];
}

/**
 * Preprocess hook for the region calendar link.
 */
function u21_content_preprocess_region_calendar_link(&$variables, $hook) {
  $node = $variables['node'];

  $link = $node->field_external_calendar[0];
  $variables['link'] = l($link['title'], $link['url'], array('attributes' => array('rel' => 'external')));
}

/**
 * Preprocess hook for taxonomy link boxes.
 */
function u21_content_preprocess_taxonomy_links(&$variables, $hook) {
  // Load vocabulary
  $vocabulary = taxonomy_get_tree($variables['vocabulary']);

  // Filter node types
  $node_types = array_filter($variables['node_types']);

  // Build path
  if ($variables['node']) { // Context is defined
    $path = str_replace('%slug', $variables['node']->panels_slug, $variables['path_prefix']) .'/';
  }
  else { // No context
    if (isset($variables['panel_args']) && count($variables['panel_args']) == 2) { 
      // Node type is given in url and term
      $path = $variables['path_prefix'] .'/'. $variables['panel_args'][0] .'/';
      $limite_by_node_type = $variables['panel_args'][0];
    }
    else if (isset($variables['panel_args']) && count($variables['panel_args']) == 1) {
      // Something is given in the URL maybe a node type
      if (in_array($variables['panel_args'][0], $node_types)) {
        // It was a node type
        $path = $variables['path_prefix'] .'/'. $variables['panel_args'][0] .'/';
        $limite_by_node_type = $variables['panel_args'][0];
      }
      else {
        $path = $variables['path_prefix'] .'/';
      }
    }
    else {
      // No node type given in url
      $path = $variables['path_prefix'] .'/';
    }
  }

  // Run through terms
  $terms = array();  
  foreach ($vocabulary as $term) {

    // Fix node count
    if (isset($limite_by_node_type)) {
      $count = taxonomy_term_count_nodes($term->tid, $limite_by_node_type);
    }
    else if (isset($variables['slug_nid'])) {
      $count = _u21_content_taxonomy_node_count($term->tid, $variables['main_type'], $variables['slug_nid']);
    }
    else {
      $count = 0;
      foreach ($node_types as $node_type) {
        $count += taxonomy_term_count_nodes($term->tid, $node_type);
      }
    }

    // Build term link
    $terms[$term->tid] = array('name' => $term->name, 
                               'count' => $count,
                               'link' => l($term->name, $path . strtolower($term->name)));
  }

  // Build all term
  $terms['all'] = array('name' => t('All'),
                        'link' => l(t('All'), $path));
  
  $variables['terms'] = $terms;
}

function u21_content_preprocess_slug_links(&$variables, $hook) {
  $result = db_query('SELECT s.slug, n.title 
                      FROM {panels_slug} s, {node} n
                      WHERE s.nid = n.nid
                        AND s.nodetype = n.type
                        AND s.nodetype = \'%s\'
                      ORDER BY n.title DESC', $variables['node_type']);
  $links = array(
    'all' => array(
        'title' => t('All'),
        'href' => $variables['global_path'],
      ),
    );
  while ($row = db_fetch_array($result)) {
    $links[$row['title']] = array('title' => $row['title'],
                                  'href' => str_replace('%slug', $row['slug'], $variables['slug_path']));
  }

  $variables['links'] = theme('links', $links);
}

function u21_content_preprocess_type_links(&$variables, $hook) {
  $variables['links'] = array();
  $term = isset($variables['args']) ? array_pop($variables['args']) : '';
  if (isset($variables['args']) && array_key_exists($term, $variables['node_types'])) {
    $term = '';
  }

  // All link
  array_push($variables['links'],l(t('All'), 'news/'. $term));
  
  // Build links
  foreach ($variables['node_types'] as $key => $value) {
    array_push($variables['links'],l($value, 'news/' .$key. '/'. $term));
  }
}

function u21_content_preprocess_static_file_links(&$variables, $hook) {
  // Set title
  $variables['title'] = t('Files for download');

  // Build file list
  $files = $variables['node']->field_multi_files;
  $variables['links'] = array();
  foreach ($files as $file) {
    if (empty($file['filepath'])) { continue; }
    array_push($variables['links'], l($file['data']['description'], $file['filepath'], array('attributes' => array('rel' => 'external'))));
  }
}

function u21_content_preprocess_page_links(&$variables, $hook) {
  // Set title
  $variables['title'] = t('External links');
  
  // Build file list
  $links = $variables['node']->field_links;
  $variables['links'] = array();
  foreach ($links as $link) {
    if (empty($link['url'])) { continue; }
    array_push($variables['links'], l($link['title'], $link['url'], array('attributes' => array('rel' => 'external'))));
  }
}

function u21_content_preprocess_sidebar(&$variables, $hook) {
  if (!empty($variables['node']->field_sidebar[0]['value'])) {
    //$variables['sidebar'] = $variables['node']->field_sidebar[0]['value'];
    $variables['sidebar'] = check_markup($variables['node']->field_sidebar[0]['value']);
  }
}

function u21_content_preprocess_event_details(&$variables, $hook) {
  $node = $variables['node'];
  
  // Convert date and start time into local time zone
  $timezone = date_default_timezone_name();
  $date = date_make_date($node->field_date[0]['value'], $node->field_date[0]['timezone_db'], DATE_ISO);
  date_timezone_set($date, timezone_open($timezone));
  $variables['date'] = date_format_date($date, 'custom', 'd. M, Y');
  $variables['time_start'] = date_format_date($date, 'custom', 'H:i');

  // Convert end time
  $date = date_make_date($node->field_date[0]['value2'], $node->field_date[0]['timezone_db'], DATE_ISO);
  date_timezone_set($date, timezone_open($timezone));
  $variables['time_end'] = date_format_date($date, 'custom', 'H:i');

  // Price
  if (isset($node->field_price[0]['value']) && $node->field_price[0]['value'] > 0) {
    $variables['price'] = $node->field_price[0]['value'] .' Kr';
  }
  else {
    $variables['price'] = t('Free of charge');
  }

  // Address
  $variables['address_name'] = $node->location['name'];
  $variables['address_street'] = $node->location['street'];
  $variables['address_city'] = $node->location['postal_code'] .' '. $node->location['city'];
}
